<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>accounts</artifactId>
        <version>v0.0.8-rc</version>
    </parent>

    <artifactId>accounts-service</artifactId>
    <packaging>jar</packaging>

    <properties>
        <!-- using version published by jitpack -->
        <crabzilla.group.id>io.github.crabzilla.crabzilla</crabzilla.group.id>
        <!-- using version published locally -->
<!--        <crabzilla.group.id>io.github.crabzilla</crabzilla.group.id>-->
        <crabzilla.version>${project.parent.version}</crabzilla.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>

        <jooq.version>3.13.1</jooq.version>
        <vertx-jooq.version>5.1.1</vertx-jooq.version>
        <postgresql.version>42.2.10</postgresql.version>
        <kotlin.version>1.3.72</kotlin.version>
        <serialization.version>0.20.0</serialization.version>
        <vertx.version>3.9.0</vertx.version>
        <jackson.version>2.10.2</jackson.version>
        <slf4j.version>1.7.25</slf4j.version>
        <logback.version>1.2.3</logback.version>
        <assertj-core.version>3.11.1</assertj-core.version>

        <!-- tests-->
        <skipTests>false</skipTests>

        <junit.jupiter.version>5.6.2</junit.jupiter.version>
        <junit.platform.version>1.3.2</junit.platform.version>

        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>2.22.2</maven-failsafe-plugin.version>
        <kotlin.compiler.incremental>false</kotlin.compiler.incremental>

        <asciidoctor.maven.plugin.version>1.5.5</asciidoctor.maven.plugin.version>
        <asciidoctorj.pdf.version>1.5.0-alpha.15</asciidoctorj.pdf.version>
        <asciidoctorj.version>1.5.5</asciidoctorj.version>

        <maven.jacoco.plugin.version>0.8.5</maven.jacoco.plugin.version>
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.jacoco.reportPath>${project.build.directory}/coverage-reports/jacoco.exec</sonar.jacoco.reportPath>
        <sonar.jacoco.itReportPath>${project.build.directory}/coverage-reports/jacoco-it.exec</sonar.jacoco.itReportPath>

    </properties>

    <repositories>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>central</id>
            <name>bintray-plugins</name>
            <url>http://jcenter.bintray.com</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-stack-depchain</artifactId>
                <version>${vertx.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.jupiter.version}</version>
                <type>pom</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- crabzilla -->
        <dependency>
            <groupId>${crabzilla.group.id}</groupId>
            <artifactId>crabzilla-core</artifactId>
            <version>${crabzilla.version}</version>
        </dependency>

        <dependency>
            <groupId>${crabzilla.group.id}</groupId>
            <artifactId>crabzilla-pg-client</artifactId>
            <version>${crabzilla.version}</version>
        </dependency>

        <dependency>
            <groupId>${crabzilla.group.id}</groupId>
            <artifactId>crabzilla-jooq</artifactId>
            <version>${crabzilla.version}</version>
        </dependency>

        <dependency>
            <groupId>${crabzilla.group.id}</groupId>
            <artifactId>crabzilla-web</artifactId>
            <version>${crabzilla.version}</version>
        </dependency>

        <!-- kotlinx.serialization -->
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-serialization-runtime</artifactId>
            <version>${serialization.version}</version>
        </dependency>

        <!-- vertx -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-config</artifactId>
        </dependency>

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-hazelcast</artifactId>
        </dependency>

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
        </dependency>

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-pg-client</artifactId>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <dependency>
            <groupId>io.github.jklingsporn</groupId>
            <artifactId>vertx-jooq-classic-reactive</artifactId>
            <version>${vertx-jooq.version}</version>
        </dependency>

        <!-- test -->

        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-junit5-web-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj-core.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>

        <sourceDirectory>src/main/java</sourceDirectory>
        <testSourceDirectory>src/test/java</testSourceDirectory>

        <plugins>

            <plugin>
                <artifactId>kotlin-maven-plugin</artifactId>
                <groupId>org.jetbrains.kotlin</groupId>
                <version>${kotlin.version}</version>
                <configuration>
                    <jvmTarget>1.8</jvmTarget>
                    <compilerPlugins>
                        <plugin>kotlinx-serialization</plugin>
                    </compilerPlugins>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-serialization</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>kapt</id>
                        <goals>
                            <goal>kapt</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>src/main/java</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-kapt</id>
                        <goals>
                            <goal>test-kapt</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>src/test/java</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <proc>none</proc>
                    <source>1.8</source>
                    <target>1.8</target>
                    <annotationProcessors>
                        <annotationProcessor>io.vertx.serviceproxy.ServiceProxyProcessor</annotationProcessor>
                    </annotationProcessors>
                </configuration>
                <executions>
                    <!-- Replacing default-compile as it is treated specially by maven -->
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <!-- Replacing default-testCompile as it is treated specially by maven -->
                    <execution>
                        <id>default-testCompile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>java-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>java-test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <!-- Sets the VM argument line used when unit tests are run. -->
                    <argLine>${surefireArgLine}</argLine>
                    <!-- Skips unit tests if the value of skip.unit.tests property is true -->
                    <skipTests>${skipTests}</skipTests>
                    <!-- Excludes integration tests when unit tests are run. -->
                    <excludes>
                        <exclude>**/IT*.java</exclude>
                    </excludes>
                    <includes>
                        <include>**/Test*.java</include>
                        <include>**/*Test.java</include>
                        <include>**/*Tests.java</include>
                        <include>**/*TestCase.java</include>
                    </includes>
                    <properties>
                        <!-- <includeTags>fast</includeTags> -->
                        <excludeTags>slow</excludeTags>
                        <!--
                                    <configurationParameters>
                                        junit.jupiter.conditions.deactivate = *
                                    </configurationParameters>
                                    -->
                    </properties>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <executions>
                    <!--
                                  Ensures that both integration-test and verify goals of the Failsafe Maven
                                  plugin are executed.
                              -->
                    <execution>
                        <id>integration-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the VM argument line used when integration tests are run. -->
                            <argLine>${failsafeArgLine}</argLine>
                            <!--
                                              Skips integration tests if the value of skip.integration.tests property
                                              is true
                                          -->
                            <skipTests>${skipTests}</skipTests>
                        </configuration>
                    </execution>
                </executions>
                <!--<dependencies>-->
                <!--<dependency>-->
                <!--<groupId>org.junit.platform</groupId>-->
                <!--<artifactId>junit-platform-surefire-provider</artifactId>-->
                <!--<version>${junit.platform.version}</version>-->
                <!--</dependency>-->
                <!--</dependencies>-->
            </plugin>

            <plugin>
                <groupId>org.jetbrains.dokka</groupId>
                <artifactId>dokka-maven-plugin</artifactId>
                <version>0.9.15</version>
                <executions>
                    <execution>
                        <phase>pre-site</phase>
                        <goals>
                            <goal>dokka</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${maven.jacoco.plugin.version}</version>
                <executions>
                    <!--
                        Prepares the property pointing to the JaCoCo runtime agent which
                        is passed as VM argument when Maven the Surefire plugin is executed.
                    -->
                    <execution>
                        <id>pre-unit-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${jacoco.ut.execution.data.file}</destFile>
                            <!--
                                Sets the name of the property containing the settings
                                for JaCoCo runtime agent.
                            -->
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!--
                        Ensures that the code coverage report for unit tests is created after
                        unit tests have been run.
                    -->
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${jacoco.ut.execution.data.file}</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                        </configuration>
                    </execution>
                    <!--
                        Prepares the property pointing to the JaCoCo runtime agent which
                        is passed as VM argument when Maven the Failsafe plugin is executed.
                    -->
                    <execution>
                        <id>pre-integration-test</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${jacoco.it.execution.data.file}</destFile>
                            <!--
                                Sets the name of the property containing the settings
                                for JaCoCo runtime agent.
                            -->
                            <propertyName>failsafeArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!--
                        Ensures that the code coverage report for integration tests after
                        integration tests have been run.
                    -->
                    <execution>
                        <id>post-integration-test</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${jacoco.it.execution.data.file}</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <finalName>crabzilla-accounts</finalName>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>io.github.crabzilla.examples.accounts.Main</mainClass>
                            <classpathPrefix>dependency-jars/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/dependency-jars/</outputDirectory>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

    <profiles>
        <profile>
            <id>jooq</id>
            <!--
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>-->
            <properties>
                <jdbc.user>user1</jdbc.user>
                <jdbc.password>pwd1</jdbc.password>
                <jdbc.url>jdbc:postgresql:example1_read</jdbc.url>
                <jdbc.driver>org.postgresql.Driver</jdbc.driver>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jooq</groupId>
                        <artifactId>jooq-codegen-maven</artifactId>
                        <version>${jooq.version}</version>
                        <!-- The plugin should hook into the generate goal -->
                        <executions>
                            <execution>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <!--              <dependency>-->
                            <!--                <groupId>org.jooq</groupId>-->
                            <!--                <artifactId>jooq-meta</artifactId>-->
                            <!--                <version>${jooq.version}</version>-->
                            <!--              </dependency>-->
                            <!--              <dependency>-->
                            <!--                <groupId>org.jooq</groupId>-->
                            <!--                <artifactId>jooq-codegen</artifactId>-->
                            <!--                <version>${jooq.version}</version>-->
                            <!--              </dependency>-->
                            <dependency>
                                <groupId>io.github.jklingsporn</groupId>
                                <artifactId>vertx-jooq-generate</artifactId>
                                <version>${vertx-jooq.version}</version>
                            </dependency>
                            <dependency>
                                <groupId>org.postgresql</groupId>
                                <artifactId>postgresql</artifactId>
                                <version>${postgresql.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <jdbc>
                                <driver>${jdbc.driver}</driver>
                                <url>${jdbc.url}</url>
                                <user>${jdbc.user}</user>
                                <password>${jdbc.password}</password>
                            </jdbc>
                            <generator>
                                <name>io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator</name>
                                <database>
                                    <inputSchema>public</inputSchema>
                                    <name>org.jooq.meta.postgres.PostgresDatabase</name>
                                    <includes>.*</includes>
                                    <excludes>.*projections|.*snapshots|units_of_work</excludes>
                                    <forcedTypes>
                                        <!--                    <forcedType>-->
                                        <!--                      <userType>java.time.LocalDateTime</userType>-->
                                        <!--                      <converter>org.jooq.impl.TimestampToLocalDateTimeConverter</converter>-->
                                        <!--                      <expression>.*date*.</expression>-->
                                        <!--                      <types>.*</types>-->
                                        <!--                    </forcedType>-->
                                        <!-- Convert tinyint to boolean -->
                                        <forcedType>
                                            <name>BOOLEAN</name>
                                            <types>(?i:TINYINT)</types>
                                        </forcedType>
                                        <!-- Convert varchar column with name 'someJsonObject' to a io.vertx.core.json.JsonObject-->
                                        <forcedType>
                                            <userType>io.vertx.core.json.JsonObject</userType>
                                            <converter>io.github.jklingsporn.vertx.jooq.shared.JsonObjectConverter</converter>
                                            <includeExpression>.*JSON.*</includeExpression>
                                            <types>.*</types>
                                        </forcedType>
                                        <!-- Convert varchar column with name 'someJsonArray' to a io.vertx.core.json.JsonArray-->
                                        <forcedType>
                                            <userType>io.vertx.core.json.JsonArray</userType>
                                            <converter>io.github.jklingsporn.vertx.jooq.shared.JsonArrayConverter</converter>
                                            <includeExpression>.*JSON_ARRAY.*</includeExpression>
                                            <types>.*</types>
                                        </forcedType>
                                    </forcedTypes>
                                </database>
                                <target>
                                    <packageName>io.github.crabzilla.examples.accounts.infra.datamodel</packageName>
                                    <directory>src/main/java</directory>
                                </target>
                                <generate>
                                    <pojos>true</pojos>
                                    <daos>true</daos>
                                    <fluentSetters>true</fluentSetters>
                                    <interfaces>true</interfaces>
                                    <records>false</records>
                                </generate>
                                <strategy>
                                    <name>io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy</name>
                                </strategy>
                            </generator>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
