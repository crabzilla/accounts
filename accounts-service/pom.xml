<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>com.crabzilla.accounts</groupId>
  <artifactId>accounts-service</artifactId>
  <version>0.0.6-rc16</version>

  <properties>
    <!-- using version published by jitpack -->
    <crabzilla.group.id>com.github.crabzilla.crabzilla</crabzilla.group.id>
    <!-- using version published locally -->
<!--    <crabzilla.group.id>io.github.crabzilla</crabzilla.group.id>-->
    <crabzilla.version>0.0.6-rc16</crabzilla.version>
    <vertx.version>3.8.1</vertx.version>
    <kotlin.version>1.3.30</kotlin.version>
    <quarkus.version>0.21.2</quarkus.version>
    <logback.version>1.2.3</logback.version>
    <assertj-core.version>3.11.1</assertj-core.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit.jupiter.version>5.4.1</junit.jupiter.version>
    <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
    <maven-surefire-plugin.version>2.22.1</maven-surefire-plugin.version>
    <maven-failsafe-plugin.version>2.22.1</maven-failsafe-plugin.version>
    <kotlin.compiler.incremental>false</kotlin.compiler.incremental>
    <dokka.version>0.9.18</dokka.version>
    <maven.jacoco.plugin.version>0.8.1</maven.jacoco.plugin.version>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.jacoco.reportPath>${project.build.directory}/coverage-reports/jacoco.exec</sonar.jacoco.reportPath>
    <sonar.jacoco.itReportPath>${project.build.directory}/coverage-reports/jacoco-it.exec
    </sonar.jacoco.itReportPath>
  </properties>

  <repositories>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>bintray-plugins</name>
      <url>http://jcenter.bintray.com</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencyManagement>
    <dependencies>

      <!--            <dependency>-->
      <!--                <groupId>io.quarkus</groupId>-->
      <!--                <artifactId>quarkus-bom</artifactId>-->
      <!--                <version>${version.quarkus}</version>-->
      <!--                <type>pom</type>-->
      <!--                <scope>import</scope>-->
      <!--            </dependency>-->

      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-stack-depchain</artifactId>
        <version>${vertx.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.jupiter.version}</version>
        <type>pom</type>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${logback.version}</version>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- crabzilla -->
    <dependency>
      <groupId>${crabzilla.group.id}</groupId>
      <artifactId>crabzilla-core</artifactId>
      <version>${crabzilla.version}</version>
    </dependency>

    <dependency>
      <groupId>${crabzilla.group.id}</groupId>
      <artifactId>crabzilla-pg-client</artifactId>
      <version>${crabzilla.version}</version>
    </dependency>

    <dependency>
      <groupId>${crabzilla.group.id}</groupId>
      <artifactId>crabzilla-web-pg-client</artifactId>
      <version>${crabzilla.version}</version>
    </dependency>

    <!-- vertx -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-config</artifactId>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-hazelcast</artifactId>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-pg-client</artifactId>
    </dependency>

    <!-- logback -->

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>

    <!-- test -->


    <!-- test -->

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.4.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj-core.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>

    <sourceDirectory>src/main/java</sourceDirectory>

      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <configuration>
            <proc>none</proc>
            <source>1.8</source>
            <target>1.8</target>
            <annotationProcessors>
              <annotationProcessor>io.vertx.serviceproxy.ServiceProxyProcessor</annotationProcessor>
            </annotationProcessors>
          </configuration>
          <executions>
            <!-- Replacing default-compile as it is treated specially by maven -->
            <execution>
              <id>default-compile</id>
              <phase>none</phase>
            </execution>
            <!-- Replacing default-testCompile as it is treated specially by maven -->
            <execution>
              <id>default-testCompile</id>
              <phase>none</phase>
            </execution>
            <execution>
              <id>java-compile</id>
              <phase>compile</phase>
              <goals>
                <goal>compile</goal>
              </goals>
            </execution>
            <execution>
              <id>java-test-compile</id>
              <phase>test-compile</phase>
              <goals>
                <goal>testCompile</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <artifactId>kotlin-maven-plugin</artifactId>
          <groupId>org.jetbrains.kotlin</groupId>
          <version>${kotlin.version}</version>
          <configuration>
            <jvmTarget>1.8</jvmTarget>
            <!--                    <compilerPlugins>-->
            <!--                        <plugin>all-open</plugin>-->
            <!--                    </compilerPlugins>-->
            <!--                    <pluginOptions>-->
            <!--                        &lt;!&ndash; Each annotation is placed on its own line &ndash;&gt;-->
            <!--                        <option>all-open:annotation=javax.ws.rs.Path</option>-->
            <!--                    </pluginOptions>-->
          </configuration>
          <executions>
            <execution>
              <id>kapt</id>
              <goals>
                <goal>kapt</goal>
              </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>src/main/java</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>
            <execution>
              <id>compile</id>
              <phase>compile</phase>
              <goals>
                <goal>compile</goal>
              </goals>
            </execution>
            <execution>
              <id>test-kapt</id>
              <goals>
                <goal>test-kapt</goal>
              </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>src/test/java</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>
            <execution>
              <id>test-compile</id>
              <phase>test-compile</phase>
              <goals>
                <goal>test-compile</goal>
              </goals>
            </execution>
          </executions>
          <!--                <dependencies>-->
          <!--                    <dependency>-->
          <!--                        <groupId>org.jetbrains.kotlin</groupId>-->
          <!--                        <artifactId>kotlin-maven-allopen</artifactId>-->
          <!--                        <version>${kotlin.version}</version>-->
          <!--                    </dependency>-->
          <!--                </dependencies>-->
        </plugin>

        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
          <configuration>
            <!-- Sets the VM argument line used when unit tests are run. -->
            <argLine>${surefireArgLine}</argLine>
            <!-- Skips unit tests if the value of skip.unit.tests property is true -->
            <skipTests>${skipTests}</skipTests>
            <!-- Excludes integration tests when unit tests are run. -->
            <excludes>
              <exclude>**/IT*.java</exclude>
            </excludes>
            <includes>
              <include>**/Test*.java</include>
              <include>**/*Test.java</include>
              <include>**/*Tests.java</include>
              <include>**/*TestCase.java</include>
            </includes>
            <properties>
              <excludeTags>slow</excludeTags>
            </properties>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven-failsafe-plugin.version}</version>
          <executions>
            <!--
                          Ensures that both integration-test and verify goals of the Failsafe Maven
                          plugin are executed.
                      -->
            <execution>
              <id>integration-tests</id>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
              <configuration>
                <!--                            &lt;!&ndash; Sets the VM argument line used when integration tests are run. &ndash;&gt;-->
                <!--                            <argLine>${failsafeArgLine}</argLine>-->
                <!--                            &lt;!&ndash;-->
                <!--                                              Skips integration tests if the value of skip.integration.tests property-->
                <!--                                              is true-->
                <!--                                          &ndash;&gt;-->
                <!--                            <skipTests>${skipTests}</skipTests>-->
                <systemProperties>
                  <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                </systemProperties>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${maven.jacoco.plugin.version}</version>
          <executions>
            <!--
                Prepares the property pointing to the JaCoCo runtime agent which
                is passed as VM argument when Maven the Surefire plugin is executed.
            -->
            <execution>
              <id>pre-unit-test</id>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
              <configuration>
                <!-- Sets the path to the file which contains the execution data. -->
                <destFile>${jacoco.ut.execution.data.file}</destFile>
                <!--
                    Sets the name of the property containing the settings
                    for JaCoCo runtime agent.
                -->
                <propertyName>surefireArgLine</propertyName>
              </configuration>
            </execution>
            <!--
                Ensures that the code coverage report for unit tests is created after
                unit tests have been run.
            -->
            <execution>
              <id>post-unit-test</id>
              <phase>test</phase>
              <goals>
                <goal>report</goal>
              </goals>
              <configuration>
                <!-- Sets the path to the file which contains the execution data. -->
                <dataFile>${jacoco.ut.execution.data.file}</dataFile>
                <!-- Sets the output directory for the code coverage report. -->
                <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
              </configuration>
            </execution>
            <!--
                Prepares the property pointing to the JaCoCo runtime agent which
                is passed as VM argument when Maven the Failsafe plugin is executed.
            -->
            <execution>
              <id>pre-integration-test</id>
              <phase>pre-integration-test</phase>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
              <configuration>
                <!-- Sets the path to the file which contains the execution data. -->
                <destFile>${jacoco.it.execution.data.file}</destFile>
                <!--
                    Sets the name of the property containing the settings
                    for JaCoCo runtime agent.
                -->
                <propertyName>failsafeArgLine</propertyName>
              </configuration>
            </execution>
            <!--
                Ensures that the code coverage report for integration tests after
                integration tests have been run.
            -->
            <execution>
              <id>post-integration-test</id>
              <phase>post-integration-test</phase>
              <goals>
                <goal>report</goal>
              </goals>
              <configuration>
                <!-- Sets the path to the file which contains the execution data. -->
                <dataFile>${jacoco.it.execution.data.file}</dataFile>
                <!-- Sets the output directory for the code coverage report. -->
                <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>

      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>com.crabzilla.examples.accounts.service.Main</Main-Class>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                </transformer>
              </transformers>
              <artifactSet></artifactSet>
              <outputFile>${project.build.directory}/${project.artifactId}.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${maven.jacoco.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jetbrains.dokka</groupId>
        <artifactId>dokka-maven-plugin</artifactId>
        <version>${dokka.version}</version>
        <executions>
          <execution>
            <phase>pre-site</phase>
            <goals>
              <goal>dokka</goal>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <includes>
            <include>Module.md</include>
          </includes>
          <sourceLinks>
            <link>
              <dir>${project.basedir}/src/main/java</dir>
              <url>https://github.com/JetBrains/kotlin-examples/blob/master/maven/dokka-maven-example</url>
              <urlSuffix>#L</urlSuffix>
            </link>
          </sourceLinks>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <profile>
      <id>quarkus</id>

      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-bom</artifactId>
            <version>${quarkus.version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>

      <dependencies>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-vertx</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-kotlin</artifactId>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-maven-plugin</artifactId>
            <version>${quarkus.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>native</id>
                <goals>
                  <goal>native-image</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <mainClass>com.accounts.service.Main</mainClass>
              <enableHttpUrlHandler>true</enableHttpUrlHandler>
              <!--<dockerBuild>true</dockerBuild>-->
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

</project>
